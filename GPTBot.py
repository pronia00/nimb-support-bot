import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession
from dotenv import load_dotenv
import os
from yandex_cloud_ml_sdk import YCloudML
from yandex_cloud_ml_sdk.auth import APIKeyAuth

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s: %(levelname)s: %(message)s",
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
bot_token = os.getenv("TELEGRAM_TOKEN")
ygpt_api_key = os.getenv("APIKeyAuth")
folder_id = os.getenv("FOLDER_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
for var_name, var_value in [
    ("FOLDER_ID", folder_id),
    ("TELEGRAM_TOKEN", bot_token),
    ("APIKeyAuth", ygpt_api_key)
]:
    if not var_value:
        raise ValueError(f"{var_name} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YandexGPT
sdk = YCloudML(
    folder_id=folder_id,
    auth=APIKeyAuth(ygpt_api_key)
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏
model = sdk.models.completions("yandexgpt")
model = model.configure(temperature=0.5)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=bot_token, session=AiohttpSession(), default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–æ–≤
dialog_contexts = {}

class MessageFormatter:
    @staticmethod
    def format_gpt_response(result):
        response_parts = []
        response_parts.append("<b>ü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:</b>")
        response_parts.append(f"{result.alternatives[0].text}\n")
        
        response_parts.append("<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>")
        response_parts.append(f"‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ –≤–æ –≤—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ: {result.usage.input_text_tokens}")
        response_parts.append(f"‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: {result.usage.completion_tokens}")
        response_parts.append(f"‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {result.usage.total_tokens}")
        response_parts.append(f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {result.alternatives[0].status}")
        response_parts.append(f"‚Ä¢ –†–æ–ª—å: {result.alternatives[0].role}")
        response_parts.append(f"‚Ä¢ –í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏: {result.model_version}")
        
        return "\n".join(response_parts)

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    welcome_text = """
<b>üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ YandexGPT.</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ /new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
‚Ä¢ /system - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
‚Ä¢ /temp - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å temperature (0.0-1.0)

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥!
"""
    await message.answer(welcome_text)

@dp.message(Command("new"))
async def new_dialog(message: types.Message):
    user_id = message.from_user.id
    dialog_contexts[user_id] = []
    await message.answer("üîÑ –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥!")

@dp.message(Command("system"))
async def set_system_prompt(message: types.Message):
    user_id = message.from_user.id
    system_prompt = message.text.replace("/system", "").strip()
    
    if not system_prompt:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã!")
        return
        
    if user_id not in dialog_contexts:
        dialog_contexts[user_id] = []
        
    dialog_contexts[user_id] = [{"role": "system", "text": system_prompt}] + [
        msg for msg in dialog_contexts[user_id] if msg["role"] != "system"
    ]
    
    await message.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n<i>{system_prompt}</i>")

@dp.message(Command("temp"))
async def set_temperature(message: types.Message):
    try:
        temp = float(message.text.replace("/temp", "").strip())
        if 0 <= temp <= 1:
            global model
            model = model.configure(temperature=temp)
            await message.answer(f"‚úÖ Temperature —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {temp}")
        else:
            await message.answer("‚ùå Temperature –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 1!")
    except ValueError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ temperature!")

@dp.message(Command("help"))
async def send_help(message: types.Message):
    help_text = """
<b>üëã –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ /new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
‚Ä¢ /system - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
‚Ä¢ /temp - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å temperature (0.0-1.0)

<b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
‚Ä¢ /system –¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç
‚Ä¢ /temp 0.7
"""
    await message.answer(help_text)

@dp.message()
async def handle_message(message: types.Message):
    try:
        user_id = message.from_user.id
        user_text = message.text
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in dialog_contexts:
            dialog_contexts[user_id] = []
            
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        dialog_contexts[user_id].append({"role": "user", "text": user_text})
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
        result = model.run(dialog_contexts[user_id])
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        dialog_contexts[user_id].append({
            "role": result.alternatives[0].role,
            "text": result.alternatives[0].text
        })
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        formatted_response = MessageFormatter.format_gpt_response(result)
        await message.answer(formatted_response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

async def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(send_welcome, CommandStart())
    dp.message.register(send_help, Command("help"))
    dp.message.register(new_dialog, Command("new"))
    dp.message.register(set_system_prompt, Command("system"))
    dp.message.register(set_temperature, Command("temp"))
    dp.message.register(handle_message)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())